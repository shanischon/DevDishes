name: CI/CD with Helm

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Detect changes and bump version for backend
      - name: Detect backend changes and bump version
        id: backend_version
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^backend/'; then
            version=$(cat backend/version.txt)
            version=$((version+1))
            echo $version > backend/version.txt
            echo "BACKEND_CHANGED=true" >> $GITHUB_ENV
            echo "BACKEND_VERSION=$version" >> $GITHUB_ENV
          else
            echo "BACKEND_CHANGED=false" >> $GITHUB_ENV
            echo "BACKEND_VERSION=$(cat backend/version.txt)" >> $GITHUB_ENV
          fi

      # Detect changes and bump version for frontend
      - name: Detect frontend changes and bump version
        id: frontend_version
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^frontend/'; then
            version=$(cat frontend/version.txt)
            version=$((version+1))
            echo $version > frontend/version.txt
            echo "FRONTEND_CHANGED=true" >> $GITHUB_ENV
            echo "FRONTEND_VERSION=$version" >> $GITHUB_ENV
          else
            echo "FRONTEND_CHANGED=false" >> $GITHUB_ENV
            echo "FRONTEND_VERSION=$(cat frontend/version.txt)" >> $GITHUB_ENV
          fi

      # Detect changes and bump version for db
      - name: Detect db changes and bump version
        id: db_version
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^devops/db/'; then
            version=$(cat devops/db/version.txt)
            version=$((version+1))
            echo $version > devops/db/version.txt
            echo "DB_CHANGED=true" >> $GITHUB_ENV
            echo "DB_VERSION=$version" >> $GITHUB_ENV
          else
            echo "DB_CHANGED=false" >> $GITHUB_ENV
            echo "DB_VERSION=$(cat devops/db/version.txt)" >> $GITHUB_ENV
          fi

      # Run backend unit tests if changed
      - name: Run backend unit tests
        if: env.BACKEND_CHANGED == 'true'
        run: |
          cd backend
          # Add your backend test command here, e.g. pytest or python -m unittest
          echo "No backend tests defined"

      # Run frontend unit tests if changed
      - name: Run frontend unit tests
        if: env.FRONTEND_CHANGED == 'true'
        run: |
          cd frontend
          npm install
          npm run test -- --passWithNoTests

      # Run db unit tests if changed
      - name: Run db unit tests
        if: env.DB_CHANGED == 'true'
        run: |
          cd devops/db
          # Add your db test command here
          echo "No db tests defined"

      # Build and push backend image if changed
      - name: Build and push backend image
        if: env.BACKEND_CHANGED == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./devops/backend/backend.Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devdishes-backend:${{ env.BACKEND_VERSION }}

      # Build and push frontend image if changed
      - name: Build and push frontend image
        if: env.FRONTEND_CHANGED == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./devops/frontend/frontend.Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devdishes-frontend:${{ env.FRONTEND_VERSION }}

      # Build and push db image if changed
      - name: Build and push db image
        if: env.DB_CHANGED == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./devops/db
          file: ./devops/db/db.Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devdishes-db:${{ env.DB_VERSION }}

      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_DATA" | base64 -d > $HOME/.kube/config
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.3

      - name: Deploy with Helm
        run: |
          helm upgrade --install devdishes devops/helm \
            --set backend.image.repository=${{ secrets.DOCKERHUB_USERNAME }}/devdishes-backend \
            --set backend.image.tag=${{ env.BACKEND_VERSION }} \
            --set frontend.image.repository=${{ secrets.DOCKERHUB_USERNAME }}/devdishes-frontend \
            --set frontend.image.tag=${{ env.FRONTEND_VERSION }} \
            --set db.image.repository=${{ secrets.DOCKERHUB_USERNAME }}/devdishes-db \
            --set db.image.tag=${{ env.DB_VERSION }}
        env:
          KUBECONFIG: $HOME/.kube/config 